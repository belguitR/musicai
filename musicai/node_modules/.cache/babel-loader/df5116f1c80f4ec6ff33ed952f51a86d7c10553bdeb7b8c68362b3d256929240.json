{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\errmi\\\\Desktop\\\\musicai\\\\musicai\\\\src\\\\Player.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport SpotifyPlayer from 'react-spotify-web-playback';\nimport './Player.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Player({\n  accessToken,\n  trackUri\n}) {\n  _s();\n  const [play, setPlay] = useState(false);\n  const [player, setPlayer] = useState(null);\n  useEffect(() => {\n    if (!window.Spotify || !accessToken) return;\n    const spotifyPlayer = new window.Spotify.Player({\n      name: 'Web Playback SDK Quick Start Player',\n      getOAuthToken: cb => {\n        cb(accessToken);\n      }\n    });\n    spotifyPlayer.addListener('ready', ({\n      device_id\n    }) => {\n      console.log('Ready with Device ID', device_id);\n      setPlayer(spotifyPlayer);\n    });\n    spotifyPlayer.addListener('not_ready', ({\n      device_id\n    }) => {\n      console.log('Device ID has gone offline', device_id);\n    });\n    spotifyPlayer.connect();\n    return () => {\n      spotifyPlayer.disconnect();\n    };\n  }, [accessToken]);\n  useEffect(() => {\n    if (player && trackUri) {\n      player.setCurrentTrack(trackUri);\n      setPlay(true);\n    }\n  }, [player, trackUri]);\n  const handleSkip = direction => {\n    if (!player) return;\n    if (direction === 'next') {\n      player.nextTrack();\n    } else if (direction === 'previous') {\n      player.previousTrack();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player-container\",\n    children: [/*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n      token: accessToken,\n      showSaveIcon: true,\n      callback: state => {\n        if (!state.isPlaying) setPlay(false);\n      },\n      play: play,\n      uris: trackUri ? [trackUri] : []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSkip('previous'),\n        children: \"<\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPlay(!play),\n        children: play ? 'Pause' : 'Play'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSkip('next'),\n        children: \">\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(Player, \"zNlvHP4hky1CHd8P+3KxizIhC1Y=\");\n_c = Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["useState","useEffect","SpotifyPlayer","jsxDEV","_jsxDEV","Player","accessToken","trackUri","_s","play","setPlay","player","setPlayer","window","Spotify","spotifyPlayer","name","getOAuthToken","cb","addListener","device_id","console","log","connect","disconnect","setCurrentTrack","handleSkip","direction","nextTrack","previousTrack","className","children","token","showSaveIcon","callback","state","isPlaying","uris","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/errmi/Desktop/musicai/musicai/src/Player.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport SpotifyPlayer from 'react-spotify-web-playback';\nimport './Player.css';\n\nexport default function Player({ accessToken, trackUri }) {\n  const [play, setPlay] = useState(false);\n  const [player, setPlayer] = useState(null);\n\n  useEffect(() => {\n    if (!window.Spotify || !accessToken) return;\n\n    const spotifyPlayer = new window.Spotify.Player({\n      name: 'Web Playback SDK Quick Start Player',\n      getOAuthToken: (cb) => { cb(accessToken); },\n    });\n\n    spotifyPlayer.addListener('ready', ({ device_id }) => {\n      console.log('Ready with Device ID', device_id);\n      setPlayer(spotifyPlayer);\n    });\n\n    spotifyPlayer.addListener('not_ready', ({ device_id }) => {\n      console.log('Device ID has gone offline', device_id);\n    });\n\n    spotifyPlayer.connect();\n\n    return () => {\n      spotifyPlayer.disconnect();\n    };\n  }, [accessToken]);\n\n  useEffect(() => {\n    if (player && trackUri) {\n      player.setCurrentTrack(trackUri);\n      setPlay(true);\n    }\n  }, [player, trackUri]);\n\n  const handleSkip = (direction) => {\n    if (!player) return;\n\n    if (direction === 'next') {\n      player.nextTrack();\n    } else if (direction === 'previous') {\n      player.previousTrack();\n    }\n  };\n\n  return (\n    <div className=\"player-container\">\n      <SpotifyPlayer\n        token={accessToken}\n        showSaveIcon\n        callback={(state) => {\n          if (!state.isPlaying) setPlay(false);\n        }}\n        play={play}\n        uris={trackUri ? [trackUri] : []}\n      />\n      <div className=\"player-controls\">\n        <button onClick={() => handleSkip('previous')}>&lt;</button>\n        <button onClick={() => setPlay(!play)}>{play ? 'Pause' : 'Play'}</button>\n        <button onClick={() => handleSkip('next')}>&gt;</button>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}